*** dwm.c	2011-05-30 00:05:45.926195438 -0500
--- DWM.c	2011-05-30 00:13:14.580431536 -0500
***************
*** 298,312 ****
  		for(i = 0; i < LENGTH(rules); i++) {
  			r = &rules[i];
  			if((!r->title || strstr(c->name, r->title))
! 			&& (!r->class || strstr(class, r->class))
! 			&& (!r->instance || strstr(instance, r->instance)))
! 			{
! 				c->isfloating = r->isfloating;
! 				c->tags |= r->tags;
! 				for(m = mons; m && m->num != r->monitor; m = m->next);
! 				if(m)
! 					c->mon = m;
! 			}
  		}
  		if(ch.res_class)
  			XFree(ch.res_class);
--- 298,312 ----
  		for(i = 0; i < LENGTH(rules); i++) {
  			r = &rules[i];
  			if((!r->title || strstr(c->name, r->title))
! 				 && (!r->class || strstr(class, r->class))
! 				 && (!r->instance || strstr(instance, r->instance)))
! 				{
! 					c->isfloating = r->isfloating;
! 					c->tags |= r->tags;
! 					for(m = mons; m && m->num != r->monitor; m = m->next);
! 					if(m)
! 						c->mon = m;
! 				}
  		}
  		if(ch.res_class)
  			XFree(ch.res_class);
***************
*** 389,400 ****
  	if(m)
  		showhide(m->stack);
  	else for(m = mons; m; m = m->next)
! 		showhide(m->stack);
  	focus(NULL);
  	if(m)
  		arrangemon(m);
  	else for(m = mons; m; m = m->next)
! 		arrangemon(m);
  }
  
  void
--- 389,400 ----
  	if(m)
  		showhide(m->stack);
  	else for(m = mons; m; m = m->next)
! 				 showhide(m->stack);
  	focus(NULL);
  	if(m)
  		arrangemon(m);
  	else for(m = mons; m; m = m->next)
! 				 arrangemon(m);
  }
  
  void
***************
*** 454,460 ****
  	}
  	for(i = 0; i < LENGTH(buttons); i++)
  		if(click == buttons[i].click && buttons[i].func && buttons[i].button == ev->button
! 		&& CLEANMASK(buttons[i].mask) == CLEANMASK(ev->state))
  			buttons[i].func(click == ClkTagBar && buttons[i].arg.i == 0 ? &arg : &buttons[i].arg);
  }
  
--- 454,460 ----
  	}
  	for(i = 0; i < LENGTH(buttons); i++)
  		if(click == buttons[i].click && buttons[i].func && buttons[i].button == ev->button
! 			 && CLEANMASK(buttons[i].mask) == CLEANMASK(ev->state))
  			buttons[i].func(click == ClkTagBar && buttons[i].arg.i == 0 ? &arg : &buttons[i].arg);
  }
  
***************
*** 982,988 ****
  			if((code = XKeysymToKeycode(dpy, keys[i].keysym)))
  				for(j = 0; j < LENGTH(modifiers); j++)
  					XGrabKey(dpy, code, keys[i].mod | modifiers[j], root,
! 						 True, GrabModeAsync, GrabModeAsync);
  		}
  	}
  }
--- 982,988 ----
  			if((code = XKeysymToKeycode(dpy, keys[i].keysym)))
  				for(j = 0; j < LENGTH(modifiers); j++)
  					XGrabKey(dpy, code, keys[i].mod | modifiers[j], root,
! 									 True, GrabModeAsync, GrabModeAsync);
  		}
  	}
  }
***************
*** 1015,1021 ****
  	}
  	else {
  		if(!(dc.font.xfont = XLoadQueryFont(dpy, fontstr))
! 		&& !(dc.font.xfont = XLoadQueryFont(dpy, "fixed")))
  			die("error, cannot load font: '%s'\n", fontstr);
  		dc.font.ascent = dc.font.xfont->ascent;
  		dc.font.descent = dc.font.xfont->descent;
--- 1015,1021 ----
  	}
  	else {
  		if(!(dc.font.xfont = XLoadQueryFont(dpy, fontstr))
! 			 && !(dc.font.xfont = XLoadQueryFont(dpy, "fixed")))
  			die("error, cannot load font: '%s'\n", fontstr);
  		dc.font.ascent = dc.font.xfont->ascent;
  		dc.font.descent = dc.font.xfont->descent;
***************
*** 1045,1051 ****
  
  	for(i = 0; i < len; i++)
  		if(unique[i].x_org == info->x_org && unique[i].y_org == info->y_org
! 		&& unique[i].width == info->width && unique[i].height == info->height)
  			return False;
  	return True;
  }
--- 1045,1051 ----
  
  	for(i = 0; i < len; i++)
  		if(unique[i].x_org == info->x_org && unique[i].y_org == info->y_org
! 			 && unique[i].width == info->width && unique[i].height == info->height)
  			return False;
  	return True;
  }
***************
*** 1061,1068 ****
  	keysym = XKeycodeToKeysym(dpy, (KeyCode)ev->keycode, 0);
  	for(i = 0; i < LENGTH(keys); i++)
  		if(keysym == keys[i].keysym
! 		&& CLEANMASK(keys[i].mod) == CLEANMASK(ev->state)
! 		&& keys[i].func)
  			keys[i].func(&(keys[i].arg));
  }
  
--- 1061,1068 ----
  	keysym = XKeycodeToKeysym(dpy, (KeyCode)ev->keycode, 0);
  	for(i = 0; i < LENGTH(keys); i++)
  		if(keysym == keys[i].keysym
! 			 && CLEANMASK(keys[i].mod) == CLEANMASK(ev->state)
! 			 && keys[i].func)
  			keys[i].func(&(keys[i].arg));
  }
  
***************
*** 1134,1140 ****
  		c->x = MAX(c->x, c->mon->mx);
  		/* only fix client y-offset, if the client center might cover the bar */
  		c->y = MAX(c->y, ((c->mon->by == 0) && (c->x + (c->w / 2) >= c->mon->wx)
! 		           && (c->x + (c->w / 2) < c->mon->wx + c->mon->ww)) ? bh : c->mon->my);
  		c->bw = borderpx;
  	}
  	wc.border_width = c->bw;
--- 1134,1140 ----
  		c->x = MAX(c->x, c->mon->mx);
  		/* only fix client y-offset, if the client center might cover the bar */
  		c->y = MAX(c->y, ((c->mon->by == 0) && (c->x + (c->w / 2) >= c->mon->wx)
! 											&& (c->x + (c->w / 2) < c->mon->wx + c->mon->ww)) ? bh : c->mon->my);
  		c->bw = borderpx;
  	}
  	wc.border_width = c->bw;
***************
*** 1205,1211 ****
  	ocx = c->x;
  	ocy = c->y;
  	if(XGrabPointer(dpy, root, False, MOUSEMASK, GrabModeAsync, GrabModeAsync,
! 	None, cursor[CurMove], CurrentTime) != GrabSuccess)
  		return;
  	if(!getrootptr(&x, &y))
  		return;
--- 1205,1211 ----
  	ocx = c->x;
  	ocy = c->y;
  	if(XGrabPointer(dpy, root, False, MOUSEMASK, GrabModeAsync, GrabModeAsync,
! 									None, cursor[CurMove], CurrentTime) != GrabSuccess)
  		return;
  	if(!getrootptr(&x, &y))
  		return;
***************
*** 1221,1227 ****
  			nx = ocx + (ev.xmotion.x - x);
  			ny = ocy + (ev.xmotion.y - y);
  			if(snap && nx >= selmon->wx && nx <= selmon->wx + selmon->ww
! 			&& ny >= selmon->wy && ny <= selmon->wy + selmon->wh) {
  				if(abs(selmon->wx - nx) < snap)
  					nx = selmon->wx;
  				else if(abs((selmon->wx + selmon->ww) - (nx + WIDTH(c))) < snap)
--- 1221,1227 ----
  			nx = ocx + (ev.xmotion.x - x);
  			ny = ocy + (ev.xmotion.y - y);
  			if(snap && nx >= selmon->wx && nx <= selmon->wx + selmon->ww
! 				 && ny >= selmon->wy && ny <= selmon->wy + selmon->wh) {
  				if(abs(selmon->wx - nx) < snap)
  					nx = selmon->wx;
  				else if(abs((selmon->wx + selmon->ww) - (nx + WIDTH(c))) < snap)
***************
*** 1231,1237 ****
  				else if(abs((selmon->wy + selmon->wh) - (ny + HEIGHT(c))) < snap)
  					ny = selmon->wy + selmon->wh - HEIGHT(c);
  				if(!c->isfloating && selmon->lt[selmon->sellt]->arrange
! 				&& (abs(nx - c->x) > snap || abs(ny - c->y) > snap))
  					togglefloating(NULL);
  			}
  			if(!selmon->lt[selmon->sellt]->arrange || c->isfloating)
--- 1231,1237 ----
  				else if(abs((selmon->wy + selmon->wh) - (ny + HEIGHT(c))) < snap)
  					ny = selmon->wy + selmon->wh - HEIGHT(c);
  				if(!c->isfloating && selmon->lt[selmon->sellt]->arrange
! 					 && (abs(nx - c->x) > snap || abs(ny - c->y) > snap))
  					togglefloating(NULL);
  			}
  			if(!selmon->lt[selmon->sellt]->arrange || c->isfloating)
***************
*** 1303,1333 ****
  	Client *c;
  
  	if((c = wintoclient(cme->window))
! 	&& (cme->message_type == netatom[NetWMState] && cme->data.l[1] == netatom[NetWMFullscreen]))
! 	{
! 		if(cme->data.l[0]) {
! 			XChangeProperty(dpy, cme->window, netatom[NetWMState], XA_ATOM, 32,
! 			                PropModeReplace, (unsigned char*)&netatom[NetWMFullscreen], 1);
! 			c->oldstate = c->isfloating;
! 			c->oldbw = c->bw;
! 			c->bw = 0;
! 			c->isfloating = 1;
! 			resizeclient(c, c->mon->mx, c->mon->my, c->mon->mw, c->mon->mh);
! 			XRaiseWindow(dpy, c->win);
! 		}
! 		else {
! 			XChangeProperty(dpy, cme->window, netatom[NetWMState], XA_ATOM, 32,
! 			                PropModeReplace, (unsigned char*)0, 0);
! 			c->isfloating = c->oldstate;
! 			c->bw = c->oldbw;
! 			c->x = c->oldx;
! 			c->y = c->oldy;
! 			c->w = c->oldw;
! 			c->h = c->oldh;
! 			resizeclient(c, c->x, c->y, c->w, c->h);
! 			arrange(c->mon);
  		}
- 	}
  }
  
  void
--- 1303,1333 ----
  	Client *c;
  
  	if((c = wintoclient(cme->window))
! 		 && (cme->message_type == netatom[NetWMState] && cme->data.l[1] == netatom[NetWMFullscreen]))
! 		{
! 			if(cme->data.l[0]) {
! 				XChangeProperty(dpy, cme->window, netatom[NetWMState], XA_ATOM, 32,
! 												PropModeReplace, (unsigned char*)&netatom[NetWMFullscreen], 1);
! 				c->oldstate = c->isfloating;
! 				c->oldbw = c->bw;
! 				c->bw = 0;
! 				c->isfloating = 1;
! 				resizeclient(c, c->mon->mx, c->mon->my, c->mon->mw, c->mon->mh);
! 				XRaiseWindow(dpy, c->win);
! 			}
! 			else {
! 				XChangeProperty(dpy, cme->window, netatom[NetWMState], XA_ATOM, 32,
! 												PropModeReplace, (unsigned char*)0, 0);
! 				c->isfloating = c->oldstate;
! 				c->bw = c->oldbw;
! 				c->x = c->oldx;
! 				c->y = c->oldy;
! 				c->w = c->oldw;
! 				c->h = c->oldh;
! 				resizeclient(c, c->x, c->y, c->w, c->h);
! 				arrange(c->mon);
! 			}
  		}
  }
  
  void
***************
*** 1384,1395 ****
  			nw = MAX(ev.xmotion.x - ocx - 2 * c->bw + 1, 1);
  			nh = MAX(ev.xmotion.y - ocy - 2 * c->bw + 1, 1);
  			if(snap && nw >= selmon->wx && nw <= selmon->wx + selmon->ww
! 			&& nh >= selmon->wy && nh <= selmon->wy + selmon->wh)
! 			{
! 				if(!c->isfloating && selmon->lt[selmon->sellt]->arrange
! 				&& (abs(nw - c->w) > snap || abs(nh - c->h) > snap))
! 					togglefloating(NULL);
! 			}
  			if(!selmon->lt[selmon->sellt]->arrange || c->isfloating)
  				resize(c, c->x, c->y, nw, nh, True);
  			break;
--- 1384,1395 ----
  			nw = MAX(ev.xmotion.x - ocx - 2 * c->bw + 1, 1);
  			nh = MAX(ev.xmotion.y - ocy - 2 * c->bw + 1, 1);
  			if(snap && nw >= selmon->wx && nw <= selmon->wx + selmon->ww
! 				 && nh >= selmon->wy && nh <= selmon->wy + selmon->wh)
! 				{
! 					if(!c->isfloating && selmon->lt[selmon->sellt]->arrange
! 						 && (abs(nw - c->w) > snap || abs(nh - c->h) > snap))
! 						togglefloating(NULL);
! 				}
  			if(!selmon->lt[selmon->sellt]->arrange || c->isfloating)
  				resize(c, c->x, c->y, nw, nh, True);
  			break;
***************
*** 1449,1455 ****
  	if(XQueryTree(dpy, root, &d1, &d2, &wins, &num)) {
  		for(i = 0; i < num; i++) {
  			if(!XGetWindowAttributes(dpy, wins[i], &wa)
! 			|| wa.override_redirect || XGetTransientForHint(dpy, wins[i], &d1))
  				continue;
  			if(wa.map_state == IsViewable || getstate(wins[i]) == IconicState)
  				manage(wins[i], &wa);
--- 1449,1455 ----
  	if(XQueryTree(dpy, root, &d1, &d2, &wins, &num)) {
  		for(i = 0; i < num; i++) {
  			if(!XGetWindowAttributes(dpy, wins[i], &wa)
! 				 || wa.override_redirect || XGetTransientForHint(dpy, wins[i], &d1))
  				continue;
  			if(wa.map_state == IsViewable || getstate(wins[i]) == IconicState)
  				manage(wins[i], &wa);
***************
*** 1458,1464 ****
  			if(!XGetWindowAttributes(dpy, wins[i], &wa))
  				continue;
  			if(XGetTransientForHint(dpy, wins[i], &d1)
! 			&& (wa.map_state == IsViewable || getstate(wins[i]) == IconicState))
  				manage(wins[i], &wa);
  		}
  		if(wins)
--- 1458,1464 ----
  			if(!XGetWindowAttributes(dpy, wins[i], &wa))
  				continue;
  			if(XGetTransientForHint(dpy, wins[i], &d1)
! 				 && (wa.map_state == IsViewable || getstate(wins[i]) == IconicState))
  				manage(wins[i], &wa);
  		}
  		if(wins)
***************
*** 1486,1492 ****
  	long data[] = { state, None };
  
  	XChangeProperty(dpy, c->win, wmatom[WMState], wmatom[WMState], 32,
! 			PropModeReplace, (unsigned char *)data, 2);
  }
  
  void
--- 1486,1492 ----
  	long data[] = { state, None };
  
  	XChangeProperty(dpy, c->win, wmatom[WMState], wmatom[WMState], 32,
! 									PropModeReplace, (unsigned char *)data, 2);
  }
  
  void
***************
*** 1560,1571 ****
  	updatestatus();
  	/* EWMH support per view */
  	XChangeProperty(dpy, root, netatom[NetSupported], XA_ATOM, 32,
! 			PropModeReplace, (unsigned char *) netatom, NetLast);
  	/* select for events */
  	wa.cursor = cursor[CurNormal];
  	wa.event_mask = SubstructureRedirectMask|SubstructureNotifyMask|ButtonPressMask
! 	                |EnterWindowMask|LeaveWindowMask|StructureNotifyMask
! 	                |PropertyChangeMask;
  	XChangeWindowAttributes(dpy, root, CWEventMask|CWCursor, &wa);
  	XSelectInput(dpy, root, wa.event_mask);
  	grabkeys();
--- 1560,1571 ----
  	updatestatus();
  	/* EWMH support per view */
  	XChangeProperty(dpy, root, netatom[NetSupported], XA_ATOM, 32,
! 									PropModeReplace, (unsigned char *) netatom, NetLast);
  	/* select for events */
  	wa.cursor = cursor[CurNormal];
  	wa.event_mask = SubstructureRedirectMask|SubstructureNotifyMask|ButtonPressMask
! 		|EnterWindowMask|LeaveWindowMask|StructureNotifyMask
! 		|PropertyChangeMask;
  	XChangeWindowAttributes(dpy, root, CWEventMask|CWCursor, &wa);
  	XSelectInput(dpy, root, wa.event_mask);
  	grabkeys();
***************
*** 1658,1664 ****
  		h = m->wh;
  	for(i = 0, c = nexttiled(c->next); c; c = nexttiled(c->next), i++) {
  		resize(c, x, y, w - 2 * c->bw, /* remainder */ ((i + 1 == n)
! 		       ? m->wy + m->wh - y - 2 * c->bw : h - 2 * c->bw), False);
  		if(h != m->wh)
  			y = c->y + HEIGHT(c);
  	}
--- 1658,1664 ----
  		h = m->wh;
  	for(i = 0, c = nexttiled(c->next); c; c = nexttiled(c->next), i++) {
  		resize(c, x, y, w - 2 * c->bw, /* remainder */ ((i + 1 == n)
! 																										? m->wy + m->wh - y - 2 * c->bw : h - 2 * c->bw), False);
  		if(h != m->wh)
  			y = c->y + HEIGHT(c);
  	}
***************
*** 1811,1827 ****
  			}
  			for(i = 0, m = mons; i < nn && m; m = m->next, i++)
  				if(i >= n
! 				|| (unique[i].x_org != m->mx || unique[i].y_org != m->my
! 				    || unique[i].width != m->mw || unique[i].height != m->mh))
! 				{
! 					dirty = True;
! 					m->num = i;
! 					m->mx = m->wx = unique[i].x_org;
! 					m->my = m->wy = unique[i].y_org;
! 					m->mw = m->ww = unique[i].width;
! 					m->mh = m->wh = unique[i].height;
! 					updatebarpos(m);
! 				}
  		}
  		else { /* less monitors available nn < n */
  			for(i = nn; i < n; i++) {
--- 1811,1827 ----
  			}
  			for(i = 0, m = mons; i < nn && m; m = m->next, i++)
  				if(i >= n
! 					 || (unique[i].x_org != m->mx || unique[i].y_org != m->my
! 							 || unique[i].width != m->mw || unique[i].height != m->mh))
! 					{
! 						dirty = True;
! 						m->num = i;
! 						m->mx = m->wx = unique[i].x_org;
! 						m->my = m->wy = unique[i].y_org;
! 						m->mw = m->ww = unique[i].width;
! 						m->mh = m->wh = unique[i].height;
! 						updatebarpos(m);
! 					}
  		}
  		else { /* less monitors available nn < n */
  			for(i = nn; i < n; i++) {
***************
*** 1844,1860 ****
  	}
  	else
  #endif /* XINERAMA */
! 	/* default monitor setup */
! 	{
! 		if(!mons)
! 			mons = createmon();
! 		if(mons->mw != sw || mons->mh != sh) {
! 			dirty = True;
! 			mons->mw = mons->ww = sw;
! 			mons->mh = mons->wh = sh;
! 			updatebarpos(mons);
  		}
- 	}
  	if(dirty) {
  		selmon = mons;
  		selmon = wintomon(root);
--- 1844,1860 ----
  	}
  	else
  #endif /* XINERAMA */
! 		/* default monitor setup */
! 		{
! 			if(!mons)
! 				mons = createmon();
! 			if(mons->mw != sw || mons->mh != sh) {
! 				dirty = True;
! 				mons->mw = mons->ww = sw;
! 				mons->mh = mons->wh = sh;
! 				updatebarpos(mons);
! 			}
  		}
  	if(dirty) {
  		selmon = mons;
  		selmon = wintomon(root);
***************
*** 1924,1930 ****
  	else
  		c->maxa = c->mina = 0.0;
  	c->isfixed = (c->maxw && c->minw && c->maxh && c->minh
! 	             && c->maxw == c->minw && c->maxh == c->minh);
  }
  
  void
--- 1924,1930 ----
  	else
  		c->maxa = c->mina = 0.0;
  	c->isfixed = (c->maxw && c->minw && c->maxh && c->minh
! 								&& c->maxw == c->minw && c->maxh == c->minh);
  }
  
  void
***************
*** 2001,2017 ****
  int
  xerror(Display *dpy, XErrorEvent *ee) {
  	if(ee->error_code == BadWindow
! 	|| (ee->request_code == X_SetInputFocus && ee->error_code == BadMatch)
! 	|| (ee->request_code == X_PolyText8 && ee->error_code == BadDrawable)
! 	|| (ee->request_code == X_PolyFillRectangle && ee->error_code == BadDrawable)
! 	|| (ee->request_code == X_PolySegment && ee->error_code == BadDrawable)
! 	|| (ee->request_code == X_ConfigureWindow && ee->error_code == BadMatch)
! 	|| (ee->request_code == X_GrabButton && ee->error_code == BadAccess)
! 	|| (ee->request_code == X_GrabKey && ee->error_code == BadAccess)
! 	|| (ee->request_code == X_CopyArea && ee->error_code == BadDrawable))
  		return 0;
  	fprintf(stderr, "dwm: fatal error: request code=%d, error code=%d\n",
! 			ee->request_code, ee->error_code);
  	return xerrorxlib(dpy, ee); /* may call exit */
  }
  
--- 2001,2017 ----
  int
  xerror(Display *dpy, XErrorEvent *ee) {
  	if(ee->error_code == BadWindow
! 		 || (ee->request_code == X_SetInputFocus && ee->error_code == BadMatch)
! 		 || (ee->request_code == X_PolyText8 && ee->error_code == BadDrawable)
! 		 || (ee->request_code == X_PolyFillRectangle && ee->error_code == BadDrawable)
! 		 || (ee->request_code == X_PolySegment && ee->error_code == BadDrawable)
! 		 || (ee->request_code == X_ConfigureWindow && ee->error_code == BadMatch)
! 		 || (ee->request_code == X_GrabButton && ee->error_code == BadAccess)
! 		 || (ee->request_code == X_GrabKey && ee->error_code == BadAccess)
! 		 || (ee->request_code == X_CopyArea && ee->error_code == BadDrawable))
  		return 0;
  	fprintf(stderr, "dwm: fatal error: request code=%d, error code=%d\n",
! 					ee->request_code, ee->error_code);
  	return xerrorxlib(dpy, ee); /* may call exit */
  }
  
***************
*** 2033,2040 ****
  	Client *c = selmon->sel;
  
  	if(!selmon->lt[selmon->sellt]->arrange
! 	|| selmon->lt[selmon->sellt]->arrange == monocle
! 	|| (selmon->sel && selmon->sel->isfloating))
  		return;
  	if(c == nexttiled(selmon->clients))
  		if(!c || !(c = nexttiled(c->next)))
--- 2033,2040 ----
  	Client *c = selmon->sel;
  
  	if(!selmon->lt[selmon->sellt]->arrange
! 		 || selmon->lt[selmon->sellt]->arrange == monocle
! 		 || (selmon->sel && selmon->sel->isfloating))
  		return;
  	if(c == nexttiled(selmon->clients))
  		if(!c || !(c = nexttiled(c->next)))
